const moment = require("moment-timezone");
const axios = require("axios");

// üì¶ URLs da API SheetDB (voc√™ deve substituir pelas suas URLs reais)
const URL_SHEETDB_ENCOMENDAS = process.env.SHEETDB_ENCOMENDAS || "https://sheetdb.io/api/v1/SEU_ID_ENCOMENDAS";
const URL_SHEETDB_HISTORICO = process.env.SHEETDB_HISTORICO || "https://sheetdb.io/api/v1/SEU_ID_HISTORICO";
const URL_SHEETDB_LOG = process.env.SHEETDB_LOG || "https://sheetdb.io/api/v1/7x5ujfu3x3vyb";

/**
 * Formata o hor√°rio no timezone de S√£o Paulo
 * @param {moment.Moment} momentObj - Objeto moment
 * @returns {string} - Hor√°rio formatado
 */
function formatarHorario(momentObj) {
  return momentObj.tz("America/Sao_Paulo").format("DD/MM/YYYY HH:mm:ss");
}

/**
 * Retorna o menu principal de encomendas
 * @returns {string} - Menu formatado
 */
function obterMenuEncomendas() {
  return `üì¶ *MENU ENCOMENDAS - JK UNIVERSIT√ÅRIO*

1Ô∏è‚É£ Registrar Encomenda üì¶
2Ô∏è‚É£ Ver Encomendas üìã
3Ô∏è‚É£ Confirmar Retirada ‚úÖ
4Ô∏è‚É£ Ver Hist√≥rico üïì

Digite o n√∫mero da op√ß√£o desejada ou use os comandos:
‚Ä¢ *!ping* - Verificar status do bot
‚Ä¢ *!ajuda* ou *menu* - Ver este menu
‚Ä¢ *!info* - Informa√ß√µes do grupo`;
}


/**
 * Registra uma nova encomenda no SheetDB
 * @param {string} usuario - N√∫mero do usu√°rio
 * @param {string} descricao - Descri√ß√£o da encomenda
 * @returns {Promise<boolean>} - Sucesso ou falha
 */
async function registrarEncomenda(usuario, descricao) {
  try {
    const dataHora = formatarHorario(moment.tz("America/Sao_Paulo"));
    
    await axios.post(URL_SHEETDB_ENCOMENDAS, {
      data: [
        {
          usuario: `@${usuario}`,
          descricao: descricao || "Encomenda registrada",
          dataHora,
          status: "Aguardando retirada",
        },
      ],
    });

    // Log da a√ß√£o
    await axios.post(URL_SHEETDB_LOG, {
      data: [
        {
          usuario: `@${usuario}`,
          mensagem: "Registrou encomenda",
          dataHora,
        },
      ],
    });

    console.log(`‚úÖ Encomenda registrada para @${usuario}`);
    return true;
  } catch (err) {
    console.error("‚ùå Erro ao registrar encomenda:", err.message);
    return false;
  }
}

/**
 * Busca encomendas pendentes no SheetDB
 * Filtra apenas encomendas com status "Aguardando retirada"
 * @returns {Promise<Array>} - Lista de encomendas pendentes
 */
async function buscarEncomendas() {
  try {
    const response = await axios.get(URL_SHEETDB_ENCOMENDAS);
    const todasEncomendas = response.data || [];
    
    // Filtra apenas encomendas pendentes (caso haja status diferentes)
    const enconendasPendentes = todasEncomendas.filter(
      (e) => !e.status || e.status === "Aguardando retirada"
    );
    
    return enconendasPendentes;
  } catch (err) {
    console.error("‚ùå Erro ao buscar encomendas:", err.message);
    return [];
  }
}

/**
 * Confirma a retirada de uma encomenda
 * Remove a encomenda da planilha principal e move para o hist√≥rico
 * @param {string} usuario - N√∫mero do usu√°rio
 * @returns {Promise<boolean>} - Sucesso ou falha
 */
async function confirmarRetirada(usuario) {
  try {
    const dataHora = formatarHorario(moment.tz("America/Sao_Paulo"));
    const usuarioFormatado = `@${usuario}`;
    
    // 1. Busca a encomenda do usu√°rio antes de deletar
    const encomendas = await buscarEncomendas();
    const encomendaUsuario = encomendas.find((e) => e.usuario === usuarioFormatado);
    
    if (!encomendaUsuario) {
      console.log(`‚ö†Ô∏è Nenhuma encomenda encontrada para @${usuario}`);
      return false;
    }

    // 2. Deleta a encomenda da planilha principal usando o SheetDB DELETE
    // SheetDB DELETE: DELETE /usuario/@usuario_numero
    await axios.delete(`${URL_SHEETDB_ENCOMENDAS}/usuario/${encodeURIComponent(usuarioFormatado)}`);
    console.log(`üóëÔ∏è Encomenda removida da planilha principal para @${usuario}`);

    // 3. Move para hist√≥rico com informa√ß√µes completas
    await axios.post(URL_SHEETDB_HISTORICO, {
      data: [
        {
          usuario: usuarioFormatado,
          descricao: encomendaUsuario.descricao || "Encomenda retirada",
          dataRegistro: encomendaUsuario.dataHora || "N/A",
          dataRetirada: dataHora,
          status: "Retirada conclu√≠da",
        },
      ],
    });
    console.log(`üìã Encomenda movida para hist√≥rico para @${usuario}`);

    // 4. Log da a√ß√£o
    await axios.post(URL_SHEETDB_LOG, {
      data: [
        {
          usuario: usuarioFormatado,
          mensagem: "Confirmou retirada de encomenda",
          dataHora,
        },
      ],
    });

    console.log(`‚úÖ Retirada confirmada com sucesso para @${usuario}`);
    return true;
  } catch (err) {
    console.error("‚ùå Erro ao confirmar retirada:", err.message);
    // Se o erro for 404 (n√£o encontrou), ainda retorna true pois n√£o h√° encomenda
    if (err.response?.status === 404) {
      console.log("‚ÑπÔ∏è Encomenda j√° foi removida ou n√£o existe");
      return false;
    }
    return false;
  }
}

/**
 * Busca hist√≥rico de encomendas no SheetDB
 * @returns {Promise<Array>} - Lista do hist√≥rico
 */
async function buscarHistorico() {
  try {
    const response = await axios.get(URL_SHEETDB_HISTORICO);
    return response.data || [];
  } catch (err) {
    console.error("‚ùå Erro ao buscar hist√≥rico:", err.message);
    return [];
  }
}

/**
 * Envia mensagem de boas-vindas para novo membro
 * @param {Object} sock - Conex√£o do WhatsApp
 * @param {string} grupoId - ID do grupo
 * @param {string} participante - JID do participante
 */
async function enviarBoasVindasEncomendas(sock, grupoId, participante) {
  try {
    const numero = participante.split("@")[0];
    const hora = moment.tz("America/Sao_Paulo").hour();
    let saudacao = "Bom dia";
    if (hora >= 12 && hora < 18) saudacao = "Boa tarde";
    else if (hora >= 18 || hora < 6) saudacao = "Boa noite";
    
    const metadata = await sock.groupMetadata(grupoId);
    
    const mensagem = `üëã ${saudacao}, @${numero}!

Seja muito bem-vindo(a) ao grupo *${metadata.subject}* üì¶

Aqui voc√™ pode gerenciar suas encomendas e receber notifica√ß√µes quando chegar algo para voc√™.

Digite *menu* para ver todas as op√ß√µes dispon√≠veis.`;

    await sock.sendMessage(grupoId, {
      text: mensagem,
      mentions: [participante],
    });

    console.log(`‚úÖ Boas-vindas enviadas para @${numero} (Encomendas)`);
  } catch (err) {
    console.error("‚ùå Erro ao enviar boas-vindas (encomendas):", err.message);
  }
}

/**
 * Processa mensagens do grupo de encomendas
 * @param {Object} sock - Conex√£o do WhatsApp
 * @param {Object} msg - Objeto da mensagem
 */
async function tratarMensagemEncomendas(sock, msg) {
  const grupoId = msg.key.remoteJid;
  const remetente = msg.key.participant || msg.key.remoteJid;
  const numero = remetente.split("@")[0];
  
  // Extrai o texto da mensagem
  const texto = (
    msg.message?.conversation ||
    msg.message?.extendedTextMessage?.text ||
    ""
  ).trim().toLowerCase();

  console.log(`üì¶ [ENCOMENDAS] Mensagem de @${numero}: ${texto}`);

  // Responde aos comandos
  try {
    // Comando: !ping
    if (texto === "!ping") {
      await sock.sendMessage(grupoId, { text: "üü¢ Bot online e funcionando!" });
      return;
    }

    // Comando: !ajuda ou menu
    if (texto === "!ajuda" || texto === "menu") {
      await sock.sendMessage(grupoId, { text: obterMenuEncomendas() });
      return;
    }

    // Comando: !info
    if (texto === "!info") {
      const metadata = await sock.groupMetadata(grupoId);
      const info = `‚ÑπÔ∏è *INFORMA√á√ïES DO GRUPO*

üìå Nome: ${metadata.subject}
üë• Participantes: ${metadata.participants.length}
üìù Descri√ß√£o: ${metadata.desc || "Sem descri√ß√£o"}
üïí Criado em: ${new Date(metadata.creation * 1000).toLocaleDateString("pt-BR")}`;
      
      await sock.sendMessage(grupoId, { text: info });
      return;
    }

    // Comando: !todos
    if (texto === "!todos") {
      const metadata = await sock.groupMetadata(grupoId);
      const mentions = metadata.participants.map((p) => p.id);
      const mentionText = metadata.participants
        .map((p) => `@${p.id.split("@")[0]}`)
        .join(" ");
      
      await sock.sendMessage(grupoId, {
        text: `üì¢ *ATEN√á√ÉO GERAL*\n\n${mentionText}`,
        mentions,
      });
      return;
    }

    // Op√ß√£o 1: Registrar Encomenda
    if (texto === "1" || texto.includes("registrar")) {
      const sucesso = await registrarEncomenda(numero, "Nova encomenda");
      
      if (sucesso) {
        await sock.sendMessage(grupoId, {
          text: `‚úÖ *ENCOMENDA REGISTRADA*\n\n@${numero}, sua encomenda foi registrada com sucesso!\n\nüìÖ Data: ${formatarHorario(moment.tz("America/Sao_Paulo"))}\n\nüì¶ Voc√™ receber√° uma notifica√ß√£o quando estiver dispon√≠vel para retirada.`,
          mentions: [remetente],
        });
      } else {
        await sock.sendMessage(grupoId, {
          text: `‚ùå Erro ao registrar encomenda. Tente novamente mais tarde.`,
        });
      }
      return;
    }

    // Op√ß√£o 2: Ver Encomendas
    if (texto === "2" || texto.includes("ver encomendas")) {
      await sock.sendMessage(grupoId, {
        text: "üîç Buscando encomendas pendentes...",
      });

      const encomendas = await buscarEncomendas();
      
      if (encomendas.length === 0) {
        await sock.sendMessage(grupoId, {
          text: "‚úÖ N√£o h√° encomendas pendentes no momento.",
        });
        return;
      }

      let lista = `üìã *ENCOMENDAS PENDENTES*\n\n`;
      encomendas.forEach((enc, index) => {
        lista += `${index + 1}. ${enc.usuario || "Usu√°rio"}\n`;
        lista += `   üì¶ ${enc.descricao || "Sem descri√ß√£o"}\n`;
        lista += `   üìÖ ${enc.dataHora || "Data n√£o informada"}\n`;
        lista += `   ‚è≥ Status: ${enc.status || "Aguardando"}\n\n`;
      });

      await sock.sendMessage(grupoId, { text: lista });
      return;
    }

    // Op√ß√£o 3: Confirmar Retirada
    if (texto === "3" || texto.includes("confirmar") || texto.includes("retirada")) {
      const sucesso = await confirmarRetirada(numero);
      
      if (sucesso) {
        await sock.sendMessage(grupoId, {
          text: `‚úÖ *RETIRADA CONFIRMADA*\n\n@${numero}, obrigado por confirmar a retirada!\n\nüìÖ ${formatarHorario(moment.tz("America/Sao_Paulo"))}\n\n‚ú® Sua encomenda foi movida para o hist√≥rico.`,
          mentions: [remetente],
        });
      } else {
        await sock.sendMessage(grupoId, {
          text: `‚ÑπÔ∏è @${numero}, voc√™ n√£o possui encomendas pendentes para confirmar retirada.\n\nUse a op√ß√£o *2* para ver as encomendas dispon√≠veis.`,
          mentions: [remetente],
        });
      }
      return;
    }

    // Op√ß√£o 4: Ver Hist√≥rico
    if (texto === "4" || texto.includes("hist√≥rico") || texto.includes("historico")) {
      await sock.sendMessage(grupoId, {
        text: "üîç Buscando hist√≥rico...",
      });

      const historico = await buscarHistorico();
      
      if (historico.length === 0) {
        await sock.sendMessage(grupoId, {
          text: "‚ÑπÔ∏è Nenhum registro no hist√≥rico.",
        });
        return;
      }

      let lista = `üïì *HIST√ìRICO DE ENCOMENDAS*\n\n`;
      
      // Mostra os √∫ltimos 10 registros
      const ultimos = historico.slice(-10).reverse();
      ultimos.forEach((reg, index) => {
        lista += `${index + 1}. ${reg.usuario || "Usu√°rio"}\n`;
        lista += `   üì¶ ${reg.descricao || reg.mensagem || "Sem descri√ß√£o"}\n`;
        lista += `   üìÖ Registrada: ${reg.dataRegistro || reg.dataHora || "N/A"}\n`;
        lista += `   ‚úÖ Retirada: ${reg.dataRetirada || "N/A"}\n`;
        lista += `   üîñ Status: ${reg.status || "Conclu√≠da"}\n\n`;
      });

      await sock.sendMessage(grupoId, { text: lista });
      return;
    }

  } catch (err) {
    console.error("‚ùå Erro ao processar mensagem de encomendas:", err.message);
    await sock.sendMessage(grupoId, {
      text: "‚ùå Desculpe, ocorreu um erro ao processar seu comando. Tente novamente.",
    });
  }
}

module.exports = {
  tratarMensagemEncomendas,
  enviarBoasVindasEncomendas,
};
